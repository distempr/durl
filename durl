#!/usr/bin/env python

import argparse
import os
import re
import sqlite3
import sys
import tomllib

from pathlib import Path
from secrets import token_urlsafe


TOKEN_INITIAL_LENGTH = 1
TOKEN_RETRIES = 64

config_home = Path(os.environ.get("XDG_CONFIG_HOME", Path.home() / ".config"))
state_home = Path(os.environ.get("XDG_STATE_HOME", Path.home() / ".local" / "state"))
config_path = config_home / "durl.toml"
db_path = state_home / "durl" / "durl.db"


with config_path.open("rb") as f:
    config = tomllib.load(f)

token_initial_length = config.get("token_initial_length", TOKEN_INITIAL_LENGTH)
token_retries = config.get("token_retries", TOKEN_RETRIES)

con = sqlite3.connect(db_path)

parser = argparse.ArgumentParser(prog="durl")
subparsers = parser.add_subparsers(required=True, dest="command")

parser_add = subparsers.add_parser("add")
parser_add.add_argument("uid", nargs="?")
#parser_add.add_argument("-e", "--encode", action="store_true")

args = parser.parse_args()

match args.command:
    case "add":
        cur = con.cursor()
        if args.uid:
            if not re.match("^[a-zA-Z0-9_-]+$", args.uid):
                print("URL ID needs to contain only the characters [a-Z0-9_-]")
                sys.exit(1)

            try:
                url = input()
            except EOFError:
                print("No URL supplied")
                sys.exit(1)

            try:
                cur.execute("INSERT INTO url (id, url) VALUES (?, ?)", (args.uid, url))
            except sqlite3.IntegrityError:
                print("Unable to add URL with supplied ID, please use another one")
                sys.exit(1)
            else:
                con.commit()
        else:
            try:
                url = input()
            except EOFError:
                print("No URL supplied")
                sys.exit(1)

            retries = 0
            length = token_initial_length
            success = False
            while not success:
                uid = token_urlsafe(length)
                try:
                    cur.execute("INSERT INTO url (id, url) VALUES (?, ?)", (uid, url))
                except sqlite3.IntegrityError:
                    if retries >= token_retries:
                        length += 1
                        retries = 0
                        continue

                    retries += 1
                    continue
                else:
                    con.commit()
                    success = True
            print(f"Generated URL ID: {uid} (length {length} retries {retries})")
    case "list":
        #def truncate_string(input_string, length):
        #    if len(input_string) > (2*length + 3):
        #        return input_string[:length] + '...' + input_string[-length:]
        #    return input_string
        pass
    case "get":
        # get the URL by UID
        pass
    case "update":
        # update URL for a UID, add option to reset hit count and last accessed
        pass
    case "archive":
        # warn if accessed recently (one year?)
        # add a flag to auto archive all old links?
        pass
    case "delete":
        # check if archived FIRST
        pass

con.close()
